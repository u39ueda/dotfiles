//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright © ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

public final class ___VARIABLE_productName:identifier___Presenter: ___VARIABLE_productName:identifier___PresenterProtocol {

    // MARK: Properties

    private weak var view: ___VARIABLE_productName:identifier___ViewProtocol?
    private let router: ___VARIABLE_productName:identifier___WireframeProtocol

    // MARK: - Life cycle

    /// コンストラクタ
    public init(interface: ___VARIABLE_productName:identifier___ViewProtocol, router: ___VARIABLE_productName:identifier___WireframeProtocol) {
        self.view = interface
        self.router = router
    }

    /// デストラクタ
    deinit {
    }

    // MARK: - PresenterProtocol

    // MARK: ViewController -> Presenter

    /// 画面がロードされた時に一度だけ呼ばれる処理.
    public func viewDidLoad() {
    }

    /// 画面が表示される直前に呼ばれる処理.
    public func viewWillAppear(_ animated: Bool) {
    }

    /// 画面が表示された直後に呼ばれる処理.
    public func viewDidAppear(_ animated: Bool) {
    }

    /// 画面が非表示にされる直前に呼ばれる処理.
    public func viewWillDisappear(_ animated: Bool) {
    }

    /// 画面が非表示にされた直後に呼ばれる処理.
    public func viewDidDisappear(_ animated: Bool) {
    }

    // MARK: Presenter -> ViewController
}
